mkdir src src/components public && touch public/index.html src/components/App.js src/index.js webpack.config.js





constructor(props) {
    super(props);
    console.log('constructor');
}
컴포넌트가 처음 만들어질 때 실행된다.
기본 state를 설정 할 수 있다.

componentWillMount : 랜더링 전
컴포넌트가 DOM 위에 만들어지기 전에 실행된다.
DOM처리 할 수 없음!!

componentDidMount : 랜더링 후
첫 렌더링 마치고 실행된다.
이 안에서 다른 자바스크립트 프레임워크 연동 및 setTimeout, setInterval 및 Ajax 사용

componentWillReceiveProps : 새로운 프롭스를 받았을 때
props를 받을 때 실행된다.
props에 따라 state를 업데이트 할 때 사용하면 유용하다.
이 안에서 setState를 해도 괜찮다.

shouldComponentUpdate : 컴포넌트가 업데이트를 해야하는지 여부 선택하는 부분
shouldComponentUpdate(nextProps, nextState) {
    console.log("shouldComponentUpdate: " + JSON.stringify(nextProps) + '' + JSON.stringify(nextState));
    return true;
}
props/state가 변경되었을때 리렌더링을 할지말지 정한다.
실제로 사용 할 때 는 필요한 비교를 하고 값을 반환해야 한다.
예: return nextProps.id !== this.props.id


ComponentWillUpdate : 업데이트 전
여기서 setState 절대 사용하지 말 것(무한루프에 빠지게 됨)

ComponentDidUpdate : 업데이트 후
여기서 setState 절대 사용하지 말 것(무한루프에 빠지게 됨)

ComponentWillUnmount : 컴포넌트가 제거될 때
컴포넌트가 DOM에서 사라진 후 실행된다.




